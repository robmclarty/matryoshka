'use strict'

const nacl = require('tweetnacl')

/**
 * Return an object containing both a public and secret key all at once.
 *
 * @param {Uint8Array} seed - An array of 32 random bytes generated by a CSPRNG.
 * @return {Object} An object containging both a public and secret key (Uint8Arrays)
 */
const keyPair = seed => {
  const secretKey = Uint8Array.from(seed)
  const publicKey = nacl.scalarMult.base(secretKey)

  return {
    secretKey,
    publicKey
  }
}

/**
 * Elliptic Curve Diffie Hellman Exchange (ECDHE)
 * Use *my* secret key with *your* public key to derive a new, shared, key which
 * you can calculate on your end by using your secret key with my public key.
 *
 * @param {Uint8Array} secretKey - A secret key generated from scalar mult.
 * @param {Uint8Array} publicKey - A public key generated shared from another user.
 * @return {Uint8Array} A new shared secret derived from parameters using scalar mult.
 */
const sharedSecret = (secretKey, publicKey) => {
  return nacl.scalarMult(secretKey, publicKey)
}

const sign = (secretKey, msg) => {
}

const verify = (publicKey, msg, signature) => {
}

const validateSecretKey = secretKey => {
}

const validatePublicKey = publicKey => {
}

module.exports = {
  keyPair,
  sharedSecret,
  sign,
  verify,
  validateSecretKey,
  validatePublicKey
}
